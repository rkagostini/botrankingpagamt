import re

from datetime import datetime, timezone
from threading import Timer

import telebot
from telebot import types

from sqlalchemy import func

from db import session
from db.models import TelegramUser, TelegramInvite, TelegramUserRelation, InviteConfirmation


# Token do bot fornecido pelo BotFather
TOKEN = '6801747573:AAE4glSvhIeJjewJorEm9fNYRPwEYKmdk9o'
bot = telebot.TeleBot(TOKEN)

# Verifica se um usu√°rio est√° no chat mencionado
def check_user_membership(chat_id, user_id):
    try:
        chat_member = bot.get_chat_member(chat_id, user_id)
        # A propriedade 'status' pode ser 'creator', 'administrator', 'member', 'restricted', 'left' ou 'kicked'
        if chat_member.status in ['creator', 'administrator', 'member', 'restricted']:
            print(f"O usu√°rio {user_id} √© membro do chat {chat_id}.")
            return True
        else:
            print(f"O usu√°rio {user_id} n√£o √© membro do chat {chat_id}.")
            return False
    except Exception as e:
        print(f"Ocorreu um erro ao verificar a associa√ß√£o: {e}")
        return False


# Inicializa√ß√£o do bot pelo usu√°rio, que realiza o cadastro do mesmo.
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id  # Extra√ß√£o da ID do usu√°rio do objeto Message
    existing_user = session.query(TelegramUser).filter_by(id=user_id).first()  # Verifica√ß√£o se o usu√°rio j√° existe no banco de dados
    if not existing_user:  # Se o usu√°rio n√£o existir, ele √© cadastrado
        nome_completo = ''
        if message.from_user.first_name:
            nome_completo += message.from_user.first_name
        if message.from_user.last_name:
            nome_completo += f" {message.from_user.last_name}"
        celular = None
        # if message.from_user.phone_number:
        #    celular = '00' # A forma de captura desse dado precisa ser revista
        new_user = TelegramUser(id=user_id, nome_completo=nome_completo, username=message.from_user.username, celular=celular, created_at=datetime.now(timezone.utc))
        session.add(new_user)
        session.commit()
        try:
            bot.send_message(message.chat.id, "Voc√™ foi cadastrado com sucesso!\n\nUtilize o comando /gerar para obter o seu link de convite. Caso voc√™ tenha sido convidado por algu√©m, por favor, me envie o link de convite que voc√™ recebeu.", parse_mode="HTML") 
        except:
            pass
    else:
        try:
            bot.send_message(message.chat.id, "Voc√™ j√° est√° cadastrado. Voc√™ deve utilizar o comando /gerar para obter seu link de convite. Se voc√™ foi convidado por algu√©m, me envie o link de convite pelo qual voc√™ foi convidado para eu o validar.", parse_mode="HTML")
        except:
            pass

# Responde ao comando /gerar com um link de convite do grupo
@bot.message_handler(commands=['gerar'])
def handle_generate(message):
    # Verifica se o comando foi enviado em um chat privado e ignora caso n√£o seja
    if not message.chat.type == 'private':
        return
    user_id = message.from_user.id
    chat_id = -1001961959701  # ID do grupo Telegram
    try:
        status = check_user_membership(chat_id, user_id)
        if not status:
            try:
                bot.send_message(message.chat.id, "Voc√™ deve ser membro do grupo para gerar um link de convite.")
            except:
                pass
            return
        # Verificamos se j√° existe um convite para este usu√°rio
        existing_invite = session.query(TelegramInvite).filter_by(user_id=user_id).first()
        if not existing_invite:  # Se n√£o existir, criamos um novo link de convite para o atribuir ao usu√°rio.
            invite_link_response = bot.create_chat_invite_link(chat_id)
            invite_link = invite_link_response.invite_link

            # Cria um novo registro no banco de dados para salvar esse link de convite
            new_invite = TelegramInvite(user_id=user_id, invite_code=invite_link)
            session.add(new_invite)
            session.commit()
            try:
                bot.send_message(message.chat.id, f"Seu link de convite foi cadastrado e √©: {invite_link}", parse_mode="HTML")
            except:
                pass
        else:  # Se j√° existir, retornamos o link de convite j√° existente
            try:
                bot.send_message(message.chat.id, f"Seu link de convite j√° foi gerado anteriormente e √©: {existing_invite.invite_code}\n\nCaso ele n√£o esteja funcionando, notifique a administra√ß√£o pois aconteceu uma limita√ß√£o do Telegram!", parse_mode="HTML")
            except:
                pass

    except Exception as e:
        try:
            bot.send_message(message.chat.id, f"Erro ao criar link de convite (notificar a administra√ß√£o): {str(e)}")
        except:
            pass


# Envia o ranking dos top 5 usu√°rios que mais convidaram manualmente
@bot.message_handler(commands=['ranking'])
def handle_manual_ranking(message):
    user_id = message.from_user.id
    # Verificamos se j√° existe um convite para este usu√°rio
    usuario = session.query(TelegramUser).filter_by(id=user_id).first()
    if not usuario:
        bot.send_message(message.chat.id, "Voc√™ n√£o est√° cadastrado no sistema. Utilize o comando /start para se cadastrar.")
        return
    if usuario.is_bot_owner or usuario.is_bot_admin:
        top_users = session.query(
        TelegramUser.id,
        TelegramUser.nome_completo,
        TelegramUser.username,
        func.count(TelegramInvite.id).label('invite_count')
        ).join(TelegramInvite, TelegramUser.id == TelegramInvite.user_id) \
        .join(InviteConfirmation, TelegramInvite.id == InviteConfirmation.invite_id) \
        .filter(InviteConfirmation.status == 'confirmada') \
        .group_by(TelegramUser.id, TelegramUser.nome_completo, TelegramUser.username) \
        .order_by(func.count(TelegramInvite.id).desc()) \
        .limit(5).all()

        if not top_users:
            bot.send_message(message.chat.id, "N√£o h√° dados suficientes para exibir o ranking.")
            return

        leaderboard_text = "üèÜ Top Convidadores üèÜ\n\n" + "\n".join([f'<a href="tg://user?id={user.id}">{user.nome_completo} ({user.username})</a>: {user.invite_count}' for user in top_users])

        try:
            bot.send_message(chat_id=message.chat.id, text=leaderboard_text, parse_mode='HTML')
        except:
            pass

timer = None # Seguran√ßa para previnir instancias duplicadas futuramente.

# Envia o ranking dos top 5 usu√°rios que mais convidaram periodicamente
def send_leaderboard():
    global timer
    if timer is not None:
        timer.cancel()  # Cancelar o temporizador atual para evitar inst√¢ncias duplicadas
    # Buscar os top 5 usu√°rios
    top_users = session.query(
    TelegramUser.id,
    TelegramUser.nome_completo,
    TelegramUser.username,
    func.count(TelegramInvite.id).label('invite_count')
    ).join(TelegramInvite, TelegramUser.id == TelegramInvite.user_id) \
    .join(InviteConfirmation, TelegramInvite.id == InviteConfirmation.invite_id) \
    .filter(InviteConfirmation.status == 'confirmada') \
    .group_by(TelegramUser.id, TelegramUser.nome_completo, TelegramUser.username) \
    .order_by(func.count(TelegramInvite.id).desc()) \
    .limit(5).all()

    # Esta condicional verifica se existem usu√°rios para enviar o ranking
    if top_users is None:
        timer = Timer(7200, send_leaderboard)  # Resetar o temporizador
        timer.start()
        return

    leaderboard_text = "üèÜ Top Convidadores üèÜ\n\n" + "\n".join([f'<a href="tg://user?id={user.id}">{user.nome_completo} ({user.username})</a>: {user.invite_count}' for user in top_users])
    try:
        bot.send_message(chat_id=-1001961959701, text=leaderboard_text, parse_mode='HTML')  # envio da mensagem
    except:
        pass

    timer = Timer(7200, send_leaderboard) # Resetar o temporizador
    timer.start()  # Reiniciar o temporizador

send_leaderboard()  # Inicializar a primeira chamada do ranking automaticamente

# Verifica mensagens de texto no privado para procurar links de convite do Telegram
@bot.message_handler(content_types=['text'])
def handle_message(message):
    # Verifica se a mensagem foi enviada em um chat privado
    if message.chat.type != 'private':
        return

    user_id = message.from_user.id
    text = message.text

    # Verificar se a mensagem cont√©m um link de convite do Telegram
    invite_link = re.search(r'https://t\.me/\S+', text)
    if invite_link:
        status = check_user_membership(-1001961959701, user_id)
        if not status:
            try:
                bot.send_message(message.chat.id, "Voc√™ deve ser membro do grupo para confirmar um convite. Clique no link.")
            except:
                pass
            return
        link = invite_link.group(0)

        # Verificar se o link de convite √© registrado e pertence √† um membro do grupo
        inviter = session.query(TelegramInvite).filter_by(invite_code=link).first()
        if not inviter:
            try:
                bot.reply_to(message, "Este link de convite n√£o √© v√°lido.")
            except:
                pass
            return
        # Verificar a id do link de convite
        invite_id = inviter.id
        if inviter.user_id == user_id:
            try:
                bot.reply_to(message, "Voc√™ n√£o pode confirmar um convite gerado por voc√™ mesmo.")
            except:
                pass
            return
        # Adi√ß√£o de um novo registro de rela√ß√£o entre o usu√°rio e o link de convite para que este seja confirmado
        confirmation = InviteConfirmation(user_id=user_id, invite_id=invite_id)
        session.add(confirmation)
        session.commit()

        confirmation = session.query(InviteConfirmation).filter_by(user_id=user_id, invite_id=invite_id).first()

        # Teclado que pode ser customizado, gera uma callback para confirmar ou negar o v√≠nculo
        markup = types.InlineKeyboardMarkup(row_width=1)
        yes_button = types.InlineKeyboardButton("Sim, este foi o usu√°rio que me convidou!", callback_data=f"confirmar_{confirmation.id}")
        no_button = types.InlineKeyboardButton("N√£o, eu n√£o reconhe√ßo este usu√°rio!", callback_data=f"negar_{confirmation.id}")
        markup.add(yes_button, no_button)

        # Obter as informa√ß√µes do usu√°rio que gerou o convite
        inviter_user = session.query(TelegramUser).filter_by(id=inviter.user_id).first()
        try:
            bot.send_message(
                chat_id=message.chat.id,
                text=f'Este link foi gerado por <a href="tg://user?id={inviter_user.id}">{inviter_user.nome_completo} ({inviter_user.username})</a>. Deseja confirmar o v√≠nculo? Clique abaixo!',
                reply_markup=markup,
                parse_mode="HTML"
            )
        except:
            pass

# Manipula√ß√£o de callbacks para confirmar ou negar o v√≠nculo
@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    action, confirmation_id = call.data.split("_")
    confirmation = session.query(InviteConfirmation).filter_by(id=int(confirmation_id)).first()
    # Buscar o usu√°rio respons√°vel pelo convite
    invite = session.query(TelegramInvite).filter_by(id=confirmation.invite_id).first()
    # Buscar informa√ß√µes do usu√°rio convidado
    invited_user = session.query(TelegramUser).filter_by(id=confirmation.user_id).first()

    # Verificar se j√° existe uma confirma√ß√£o efetivada para este usu√°rio
    existing_confirmation = session.query(InviteConfirmation).filter_by(user_id=confirmation.user_id, status='confirmada').first()
    if existing_confirmation:
        try:
            bot.answer_callback_query(call.id, "Voc√™ j√° confirmou um convite anteriormente! Cada usu√°rio pode confirmar apenas um convite.")
        except:
            pass
        return  # Interrompe a execu√ß√£o para evitar confirma√ß√µes duplicadas

    status = check_user_membership(-1001961959701, confirmation.user_id)
    if not status:
        try:
            bot.answer_callback_query(call.id, "Voc√™ deve ser membro do grupo para confirmar um convite. Retorne ao grupo ou entre primeiro clicando no link.")
        except:
            pass
        return

    if action == 'confirmar':
        confirmation.status = 'confirmada'
        try:
            bot.answer_callback_query(call.id, "V√≠nculo confirmado!\n\nQue tal voc√™ mesmo gerar seu link de convite para voc√™ participar tamb√©m? Utilize o comando /gerar!")
        except:
            pass
        # Cria a rela√ß√£o de convite no banco de dados
        new_relation = TelegramUserRelation(
            inviter_id=invite.user_id,
            invited_id=invited_user.id,
            invite_id=confirmation.invite_id,
            joined_at=datetime.now(timezone.utc)
        )
        session.add(new_relation)

        try:
            bot.send_message(invite.user_id, f'Seu convite para <a href="tg://user?id={confirmation.user_id}">{invited_user.nome_completo} ({invited_user.username})</a> foi confirmado!')
        except Exception as e:
            print(f"Erro ao enviar mensagem para o usu√°rio {invite.user_id}: {str(e)}")
    elif action == 'negar':
        confirmation.status = 'negada'
        try:
            bot.answer_callback_query(call.id, "V√≠nculo negado! Voc√™ pode tentar novamente com outro link de convite.")
        except:
            pass
        try:
            bot.send_message(invite.user_id, f'O usu√°rio <a href="tg://user?id={confirmation.user_id}">{invited_user.nome_completo} ({invited_user.username})</a> tentou utilizar o seu link de convite mas negou a confirma√ß√£o!')
        except Exception as e:
            print(f"Erro ao enviar mensagem para o usu√°rio {invite.user_id}: {str(e)}")

    session.commit()
    try:
        bot.edit_message_text(
            text=f"Status do convite: {confirmation.status}",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
    except:
        pass


if __name__ == '__main__':
    bot.polling(none_stop=True)
